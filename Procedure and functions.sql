CREATE OR REPLACE PROCEDURE PROC_EMPLOYEE_SALARY_INC AS
n_newsalary float :=0.0;
type employee_list_type is table of employees.salary%type;
employee_list employee_list_type;
BEGIN
    select salary bulk collect into employee_list from employees;
    for i in employee_list.first..employee_list.last 
    loop
        n_newsalary := (employee_list(i)*0.1)+employee_list(i);
        employee_list(i) := n_newsalary;
    end loop;
    forall i in employee_list.first..employee_list.last
        insert into audit_taril values(employee_list(i));
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occured');
END;
/

begin
   PROC_EMPLOYEE_SALARY_INC;
end;

CREATE OR REPLACE PROCEDURE PROC_EMP_SALARY_INC_NEW AS
n_newsalary float :=0.0;
cursor employee_cur_lst is select salary from employees;
BEGIN
    if not employee_cur_lst%OPEN then
        open employee_cur_lst;
    LOOP
        fetch employee_cur_lst.salary into n_newsalary;
        exit when employee_cur_lst%NOTFOUND;
            n_newsalary := (n_newsalary*0.1)+n_newsalary;
            insert into audit_taril values(n_newsalary);
    END LOOP;
    close employee_cur_lst;
    EXCEPTION WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occured');
END;
/

CREATE OR REPLACE PROCEDURE INCREASE_SALARIES(V_SALARY_INCREASE IN NUMBER) AS
CURSOR C_EMPS IS SELECT * FROM EMP_BKP FOR UPDATE;
--V_SALARY_INCREASE NUMBER :=1.10;
V_OLD_SALARY NUMBER;
BEGIN
    FOR i IN C_EMPS LOOP
        V_OLD_SALARY := i.SALARY;
        i.SALARY := i.SALARY*V_SALARY_INCREASE + i.SALARY;
        UPDATE EMP_BKP SET ROW=i WHERE CURRENT OF C_EMPS;
        DBMS_OUTPUT.PUT_LINE('THE SALAY OF: '|| i.EMPLOYEE_ID||' IS INCREASED FROM '|| V_OLD_SALARY ||' TO ' ||i.SALARY);
    END LOOP;
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('An error occured');
END;
/

SET SERVEROUTPUT ON

BEGIN
INCREASE_SALARIES(0.1);
END;

CREATE OR REPLACE PROCEDURE PROC_SALARY_INCREASE(V_SALARY_INCREASE IN OUT NUMBER, V_DEPARTMENT_ID PLS_INTEGER, V_AFFECTED_EMPLOYEEE_COUNT OUT NUMBER) AS
CURSOR C_EMPS IS SELECT * FROM EMP_BKP WHERE DEPARTMENT_ID = V_DEPARTMENT_ID FOR UPDATE;
V_OLD_SALARY NUMBER;
V_SAL_INC NUMBER :=0;
BEGIN
    V_AFFECTED_EMPLOYEEE_COUNT := 0;
    FOR R_EMP IN C_EMPS LOOP
        V_OLD_SALARY := R_EMP.SALARY;
        R_EMP.SALARY := R_EMP.SALARY * V_SALARY_INCREASE + R_EMP.SALARY;
        UPDATE EMP_BKP SET ROW=R_EMP WHERE CURRENT OF C_EMPS;
        DBMS_OUTPUT.PUT_LINE('THE SALAY OF: '|| R_EMP.EMPLOYEE_ID||' IS INCREASED FROM '|| V_OLD_SALARY ||' TO ' ||R_EMP.SALARY);
        V_AFFECTED_EMPLOYEEE_COUNT := V_AFFECTED_EMPLOYEEE_COUNT+1;
    END LOOP;
    EXCEPTION 
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO DATA');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('AN ERROR OCCURED');    
END;
/

DECLARE
V_SAL_INC NUMBER :=1.5;
V_AFFECTED_EMP_COUNT NUMBER;
BEGIN
    PROC_SALARY_INCREASE(V_SAL_INC, 90, V_AFFECTED_EMP_COUNT);
    DBMS_OUTPUT.PUT_LINE('AFFECTED EMP COUNT: '||V_AFFECTED_EMP_COUNT);
END;

CREATE OR REPLACE PROCEDURE PROC_ADD_JOB(JOB_ID VARCHAR2, JOB_TITLE VARCHAR2, MIN_SALARY NUMBER DEFAULT 1000, MAX_SALARY NUMBER DEFAULT NULL) IS
BEGIN
    INSERT INTO JOBS VALUES(JOB_ID,JOB_TITLE, MIN_SALARY, MAX_SALARY);
    DBMS_OUTPUT.PUT_LINE('PROCEDURE COMPLETED');
END;
/

EXEC PROC_ADD_JOB('IT_DIR2', 'IT DIRECTOR 2', 5000, 6000);

EXEC PROC_ADD_JOB('IT_DIR3', 'IT DIRECTOR 3');

EXEC PROC_ADD_JOB('IT_DIR4', 'IT DIRECTOR 4', MAX_SALARY => 10000);


SELECT * FROM JOBS

CREATE OR REPLACE FUNCTION FN_GET_AVG_SAL(P_DEPT_ID IN DEPARTMENTS.DEPARTMENT_ID%TYPE) RETURN NUMBER AS
V_AVG_SAL NUMBER;
BEGIN
    SELECT AVG(SALARY) INTO V_AVG_SAL FROM EMP_BKP WHERE DEPARTMENT_ID = P_DEPT_ID;
    RETURN V_AVG_SAL;
END;
/

SELECT FN_GET_AVG_SAL(90) FROM DUAL; 
/
DECLARE
V_AVG_SL NUMBER;
BEGIN
    V_AVG_SL := FN_GET_AVG_SAL(90);
    DBMS_OUTPUT.PUT_LINE('AVG SLARY: '||V_AVG_SL);
END;
/

CREATE TABLE EMPS_HIGH_PAID AS SELECT * FROM EMPLOYEES WHERE 1=2;
/
DECLARE
FUNCTION GET_EMP (EMP_NUM EMPLOYEES.EMPLOYEE_ID%TYPE) RETURN EMPLOYEES%ROWTYPE IS
    EMP EMPLOYEES%ROWTYPE;
BEGIN
    SELECT * INTO EMP FROM EMPLOYEES WHERE EMPLOYEE_ID = EMP_NUM;
    RETURN EMP;
END;
PROCEDURE INSERT_HIGH_PAID_EMP (EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE) IS
    EMP EMPLOYEES%ROWTYPE;
BEGIN
    EMP := GET_EMP(EMP_ID);
    INSERT INTO EMPS_HIGH_PAID VALUES EMP;
END;
BEGIN
FOR R_EMP IN (SELECT * FROM EMPLOYEES) LOOP
    IF R_EMP.SALARY>15000 THEN
        INSERT_HIGH_PAID_EMP(R_EMP.EMPLOYEE_ID); 
    END IF;
END LOOP;
END;
/

CREATE OR REPLACE FUNCTION GET_EMP(EMP_NUM EMPLOYEES.EMPLOYEE_ID%TYPE) RETURN EMPLOYEES%ROWTYPE AS
EMP EMPLOYEES%ROWTYPE;
BEGIN
    SELECT * INTO EMP FROM EMPLOYEES WHERE EMPLOYEE_ID = EMP_NUM;
    RETURN EMP;
    EXCEPTION 
    WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('NO DATA....');
            RETURN NULL;
    WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('NO DATA....');
            RETURN NULL;
END;
/

DECLARE
V_EMP EMPLOYEES%ROWTYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('FETCHING EMPLOYEE...!');
    V_EMP := GET_EMP(10);
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE DETAILS...!');
    DBMS_OUTPUT.PUT_LINE('NAME: '||V_EMP.FIRST_NAME ||' ' ||V_EMP.LAST_NAME);
    DBMS_OUTPUT.PUT_LINE('SALARY: '||V_EMP.SALARY);
END;
/

CREATE TYPE T_DAYS AS OBJECT(V_DATE DATE,V_DAY_NUMBER INT);
/
CREATE TYPE T_DAYS_TAB IS TABLE OF T_DAYS;
/

CREATE OR REPLACE FUNCTION FN_GET_DAYS (P_START_DATE DATE, P_DAY_NUMBER INT) RETURN T_DAYS_TAB IS
V_DAYS T_DAYS_TAB := T_DAYS_TAB();
BEGIN
    FOR i IN 1..P_DAY_NUMBER LOOP
        V_DAYS.EXTEND();
        V_DAYS(i) := T_DAYS(P_START_DATE+i, TO_NUMBER(TO_CHAR(P_START_DATE + i, 'DDD')));
    END LOOP;
    RETURN V_DAYS;
END;
/

SELECT * FROM FN_GET_DAYS(SYSDATE,100000);

CREATE OR REPLACE FUNCTION FN_GET_DAYS_PIPED (P_START_DATE DATE, P_DAY_NUMBER INT) RETURN T_DAYS_TAB PIPELINED AS
--V_DAYS T_DAYS_TAB := T_DAYS_TAB();
BEGIN
    FOR i IN 1..P_DAY_NUMBER LOOP
        --V_DAYS.EXTEND();
        --V_DAYS(i) := T_DAYS(P_START_DATE+i, TO_NUMBER(TO_CHAR(P_START_DATE + i, 'DDD')));
        PIPE ROW (T_DAYS(P_START_DATE+i, TO_NUMBER(TO_CHAR(P_START_DATE + i, 'DDD'))));
    END LOOP;
    RETURN;
END;
/

SELECT * FROM FN_GET_DAYS_PIPED(SYSDATE,100000);

